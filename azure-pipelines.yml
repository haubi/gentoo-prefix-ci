# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# do not build anything just because we commit to the pipeline
trigger:
  branches:
    exclude:
    - '*'

# instead, perform scheduled builds only (besides manually queued ones)
schedules:
  - cron: "0 12 * * 1"
    displayName: Weekly build
    branches:
      include:
      - master
    always: true

stages:
  - stage: "Cygwin"
    dependsOn: []
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            v3_win2012r2:
              server_version: '2012'
              cygwin_version: 3
            v3_win2016:
              server_version: '2016'
              cygwin_version: 3
            v3_win2019:
              server_version: '2019'
              cygwin_version: 3
        pool:
          name: 'Provided Windows $(server_version)'
        steps:
        - powershell: Get-ChildItem 'Env:' | Tee-Object agent-env.out
          displayName: 'Agent Info'
        - powershell: PowerShell -File cygwin/setupv$(cygwin_version).ps1 2>&1 > cygwin-setup.out
          timeoutInMinutes: 0
          displayName: 'perform Cygwin v$(cygwin_version) Setup'
        - powershell: Get-Content cygwin-setup.out
          timeoutInMinutes: 0
          condition: always()
          displayName: 'show Cygwin v$(cygwin_version) Setup'
        - powershell: PowerShell -File cygwin/prefix.ps1 2>&1 > cygwin-prefix.out
          timeoutInMinutes: 0
          displayName: 'perform Gentoo Prefix bootstrap'
        - powershell: Get-Content cygwin-prefix.out
          timeoutInMinutes: 0
          condition: always()
          displayName: 'show Gentoo Prefix bootstrap'
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'x86_64-pc-cygwin$(cygwin_version)w$(server_version)/gentoo-prefix'
            targetPath: $(BUILD.STAGINGDIRECTORY)/gentoo-prefix
          condition: always()
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'x86_64-pc-cygwin$(cygwin_version)w$(server_version)/sources'
            targetPath: $(BUILD.SOURCESDIRECTORY)
          condition: always()

  - stage: "MacOS"
    dependsOn: []
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            current:
              macOS_version: 'macOS'
            highSierra:
              macOS_version: 'macOS High Sierra'
        pool:
          name: 'Hosted $(macOS_version)'
        steps:
        - script: set
          displayName: 'MacOS Info'
        - script: ./macos/prefix.sh
          timeoutInMinutes: 0
          displayName: 'MacOS Prefix'

  - stage: "Guest"
    dependsOn: []
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            fedora:
              docker_os: fedora
            fedora28:
              docker_os: fedora28
            opensuseLeap:
              docker_os: opensuseLeap
            opensuseTumbleweed:
              docker_os: opensuseTumbleweed
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
        - script: uname -a; cat /proc/cpuinfo; cat /proc/meminfo; declare -p; cat /etc/*-release; ls -l; pwd
          displayName: 'Machine Info'
        - script: cat docker/Dockerfile.{$(docker_os),linux-user,prefix-bootstrap,entrypoint}
                  | docker build -f - --build-arg=BOOTSTRAP_OPTS="--force-32bit=no --rap=no" .
          displayName: '$(docker_os) Prefix Guest'
          timeoutInMinutes: 0

  - stage: "Guest_32bit"
    dependsOn: []
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            fedora:
              docker_os: fedora
            fedora28:
              docker_os: fedora28
            opensuseLeap:
              docker_os: opensuseLeap
            opensuseTumbleweed:
              docker_os: opensuseTumbleweed
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
        - script: uname -a; cat /proc/cpuinfo; cat /proc/meminfo; declare -p; cat /etc/*-release; ls -l; pwd
          displayName: 'Machine Info'
        - script: cat docker/Dockerfile.{$(docker_os),linux-user,prefix-bootstrap,entrypoint}
                  | docker build -f - --build-arg=BOOTSTRAP_OPTS="--force-32bit=yes --rap=no" .
          displayName: '$(docker_os) Prefix Guest 32bit'
          timeoutInMinutes: 0

  - stage: "RAP"
    dependsOn: []
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            fedora:
              docker_os: fedora
            fedora28:
              docker_os: fedora28
            opensuseTumbleweed:
              docker_os: opensuseTumbleweed
            opensuseLeap:
              docker_os: opensuseLeap
            ubuntu:
              docker_os: ubuntu
            ubuntu16:
              docker_os: ubuntu16
        pool:
          name: 'Provided Ubuntu 18'
        steps:
        - script: uname -a;
                  cat /proc/cpuinfo;
                  cat /proc/meminfo;
                  declare -p;
                  cat /etc/*-release;
                  ls -l;
                  pwd;
                  docker container prune -f || :;
                  docker images -q | xargs docker rmi || :;
          displayName: 'Machine Info'
        - script: cat docker/Dockerfile.{$(docker_os),linux-user,prefix-bootstrap,entrypoint}
                  | docker build -f - --build-arg=BOOTSTRAP_OPTS="--force-32bit=no --rap=yes" .
          displayName: '$(docker_os) Prefix RAP'
          timeoutInMinutes: 0

  - stage: "RAP_32bit"
    dependsOn: []
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            fedora:
              docker_os: fedora
            fedora28:
              docker_os: fedora28
            opensuseTumbleweed:
              docker_os: opensuseTumbleweed
            opensuseLeap:
              docker_os: opensuseLeap
            ubuntu:
              docker_os: ubuntu
            ubuntu16:
              docker_os: ubuntu16
        pool:
          name: 'Provided Ubuntu 18'
        steps:
        - script: uname -a;
                  cat /proc/cpuinfo;
                  cat /proc/meminfo;
                  declare -p;
                  cat /etc/*-release;
                  ls -l;
                  pwd;
                  docker container prune -f || :;
                  docker images -q | xargs docker rmi || :;
          displayName: 'Machine Info'
        - script: cat docker/Dockerfile.{$(docker_os),linux-user,prefix-bootstrap,entrypoint}
                  | docker build -f - --build-arg=BOOTSTRAP_OPTS="--force-32bit=yes --rap=yes" .
          displayName: '$(docker_os) Prefix RAP 32bit'
          timeoutInMinutes: 0
