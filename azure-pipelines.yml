# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# do not build anything just because we commit to the pipeline
trigger:
  branches:
    exclude:
    - '*'

# instead, perform scheduled builds only (besides manually queued ones)
schedules:
  - cron: "0 12 * * 1"
    displayName: Weekly build
    branches:
      include:
      - master
    always: true

stages:
  - stage: "Cygwin"
    dependsOn: []
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            v3_win2019:
              server_version: '2019'
              cygwin_version: 3
        pool:
          name: 'Provided Windows $(server_version)'
        steps:
        - powershell: Get-ChildItem 'Env:' | Tee-Object agent-env.out
          displayName: 'Agent Info'
        - powershell: PowerShell -File cygwin/setupv$(cygwin_version).ps1 2>&1 > cygwin-setup.out
          timeoutInMinutes: 0
          displayName: 'perform Cygwin v$(cygwin_version) Setup'
        - powershell: Get-Content cygwin-setup.out
          timeoutInMinutes: 0
          condition: always()
          displayName: 'show Cygwin v$(cygwin_version) Setup'
        - powershell: PowerShell -File cygwin/prefix.ps1 2>&1 > cygwin-prefix.out
          timeoutInMinutes: 0
          displayName: 'perform Gentoo Prefix bootstrap'
        - powershell: Get-Content cygwin-prefix.out
          timeoutInMinutes: 0
          condition: always()
          displayName: 'show Gentoo Prefix bootstrap'
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'x86_64-pc-cygwin$(cygwin_version)w$(server_version)/gentoo-prefix'
            targetPath: $(BUILD.STAGINGDIRECTORY)/gentoo-prefix
          condition: always()
        - task: PublishPipelineArtifact@0
          inputs:
            artifactName: 'x86_64-pc-cygwin$(cygwin_version)w$(server_version)/sources'
            targetPath: $(BUILD.SOURCESDIRECTORY)
          condition: always()

  - stage: "MacOS"
    dependsOn: []
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            current:
              macOS_version: 'macOS'
            highSierra:
              macOS_version: 'macOS High Sierra'
        pool:
          name: 'Hosted $(macOS_version)'
        steps:
        - script: set
          displayName: 'MacOS Info'
        - script: ./macos/prefix.sh
          timeoutInMinutes: 0
          displayName: 'MacOS Prefix'

  - stage: "Linux_First"
    dependsOn: []
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            fedora:
              from: fedora
              bit32: no
              guest: no
            fedora28:
              from: fedora28
              bit32: no
              guest: no
            opensuse15:
              from: opensuse15
              bit32: no
              guest: no
            opensuse16:
              from: opensuse16
              bit32: no
              guest: no
            ubuntu:
              from: ubuntu
              bit32: no
              guest: no
            ubuntu16:
              from: ubuntu16
              bit32: no
              guest: no

            guest-fedora:
              from: fedora
              bit32: no
              guest: yes
            guest-fedora28:
              from: fedora28
              bit32: no
              guest: yes
            guest-opensuse15:
              from: opensuse15
              bit32: no
              guest: yes
            guest-opensuse16:
              from: opensuse16
              bit32: no
              guest: yes

            32bit-fedora:
              from: fedora
              bit32: yes
              guest: no
            32bit-fedora28:
              from: fedora28
              bit32: yes
              guest: no
            32bit-opensuse15:
              from: opensuse15
              bit32: yes
              guest: no
            32bit-opensuse16:
              from: opensuse16
              bit32: yes
              guest: no
            32bit-ubuntu:
              from: ubuntu
              bit32: yes
              guest: no
            32bit-ubuntu16:
              from: ubuntu16
              bit32: yes
              guest: no

            guest-32bit-fedora:
              from: fedora
              bit32: yes
              guest: yes
            guest-32bit-fedora28:
              from: fedora28
              bit32: yes
              guest: yes
            guest-32bit-opensuse15:
              from: opensuse15
              bit32: yes
              guest: yes
            guest-32bit-opensuse16:
              from: opensuse16
              bit32: yes
              guest: yes

        pool:
          vmImage: 'ubuntu-16.04'
        steps:
        - script: docker login --username $(DockerHub_user) --password '$(DockerHub_pass)'
          displayName: 'Docker Login'
        - script: ./linux/docker-bootstrap.sh --from-os=$(from) --force-32bit=$(bit32) --guest=$(guest) --timeout=4h --docker-push=yes
          displayName: 'Bootstrap'
          timeoutInMinutes: 0

  - stage: "Linux_Second"
    dependsOn: [ "Linux_First" ]
    condition: always()
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            fedora:
              from: fedora
              bit32: no
              guest: no
            fedora28:
              from: fedora28
              bit32: no
              guest: no
            opensuse15:
              from: opensuse15
              bit32: no
              guest: no
            opensuse16:
              from: opensuse16
              bit32: no
              guest: no
            ubuntu:
              from: ubuntu
              bit32: no
              guest: no
            ubuntu16:
              from: ubuntu16
              bit32: no
              guest: no

            guest-fedora:
              from: fedora
              bit32: no
              guest: yes
            guest-fedora28:
              from: fedora28
              bit32: no
              guest: yes
            guest-opensuse15:
              from: opensuse15
              bit32: no
              guest: yes
            guest-opensuse16:
              from: opensuse16
              bit32: no
              guest: yes

            32bit-fedora:
              from: fedora
              bit32: yes
              guest: no
            32bit-fedora28:
              from: fedora28
              bit32: yes
              guest: no
            32bit-opensuse15:
              from: opensuse15
              bit32: yes
              guest: no
            32bit-opensuse16:
              from: opensuse16
              bit32: yes
              guest: no
            32bit-ubuntu:
              from: ubuntu
              bit32: yes
              guest: no
            32bit-ubuntu16:
              from: ubuntu16
              bit32: yes
              guest: no

            guest-32bit-fedora:
              from: fedora
              bit32: yes
              guest: yes
            guest-32bit-fedora28:
              from: fedora28
              bit32: yes
              guest: yes
            guest-32bit-opensuse15:
              from: opensuse15
              bit32: yes
              guest: yes
            guest-32bit-opensuse16:
              from: opensuse16
              bit32: yes
              guest: yes

        pool:
          vmImage: 'ubuntu-16.04'
        steps:
        - script: docker login --username $(DockerHub_user) --password '$(DockerHub_pass)'
          displayName: 'Docker Login'
        - script: ./linux/docker-bootstrap.sh --from-os=$(from) --force-32bit=$(bit32) --guest=$(guest) --timeout=5h --resume=yes --docker-push=true
          displayName: 'Bootstrap'
          timeoutInMinutes: 0


  - stage: "Linux_Final"
    dependsOn: [ "Linux_Second" ]
    condition: always()
    jobs:
      - job: "Prefix"
        timeoutInMinutes: 0
        strategy:
          matrix:
            fedora:
              from: fedora
              bit32: no
              guest: no
            fedora28:
              from: fedora28
              bit32: no
              guest: no
            opensuse15:
              from: opensuse15
              bit32: no
              guest: no
            opensuse16:
              from: opensuse16
              bit32: no
              guest: no
            ubuntu:
              from: ubuntu
              bit32: no
              guest: no
            ubuntu16:
              from: ubuntu16
              bit32: no
              guest: no

            guest-fedora:
              from: fedora
              bit32: no
              guest: yes
            guest-fedora28:
              from: fedora28
              bit32: no
              guest: yes
            guest-opensuse15:
              from: opensuse15
              bit32: no
              guest: yes
            guest-opensuse16:
              from: opensuse16
              bit32: no
              guest: yes

            32bit-fedora:
              from: fedora
              bit32: yes
              guest: no
            32bit-fedora28:
              from: fedora28
              bit32: yes
              guest: no
            32bit-opensuse15:
              from: opensuse15
              bit32: yes
              guest: no
            32bit-opensuse16:
              from: opensuse16
              bit32: yes
              guest: no
            32bit-ubuntu:
              from: ubuntu
              bit32: yes
              guest: no
            32bit-ubuntu16:
              from: ubuntu16
              bit32: yes
              guest: no

            guest-32bit-fedora:
              from: fedora
              bit32: yes
              guest: yes
            guest-32bit-fedora28:
              from: fedora28
              bit32: yes
              guest: yes
            guest-32bit-opensuse15:
              from: opensuse15
              bit32: yes
              guest: yes
            guest-32bit-opensuse16:
              from: opensuse16
              bit32: yes
              guest: yes

        pool:
          vmImage: 'ubuntu-16.04'
        steps:
        - script: docker login --username $(DockerHub_user) --password '$(DockerHub_pass)'
          displayName: 'Docker Login'
        - script: ./linux/docker-bootstrap.sh --from-os=$(from) --force-32bit=$(bit32) --guest=$(guest) --resume=yes --docker-push=true
          displayName: 'Bootstrap'
          timeoutInMinutes: 0
